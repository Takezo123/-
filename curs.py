
from aiogram.enums import ParseMode, ContentType
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from openai import OpenAI
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—ã)
API_TOKEN = '7786110568:AAGAcufBSEGiX5WDYwhBksEe-b0rw7xuwi0'


ADMIN_TOKEN = '7938055354:AAEz9ieMMeJaO2xZ7Uyou7lld6issJbJzZs'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
admin_bot = Bot(token=ADMIN_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
admin_dp = Dispatcher()


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
def init_db():
    conn = sqlite3.connect('applicants.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applicants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            full_name TEXT NOT NULL,
            phone TEXT NOT NULL,
            telegram_tag TEXT NOT NULL,
            specialty TEXT NOT NULL,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7786110568:AAGAcufBSEGiX5WDYwhBksEe-b0rw7xuwi0'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
base_url = "https://openrouter.ai/api/v1"
api_key = "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"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –ö–õ–Æ–ß

api = OpenAI(
    api_key=api_key,
    base_url=base_url,
    default_headers={
        "HTTP-Referer": "Noginsk College Bot",
        "X-Title": "Admissions Assistant"
    }
)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_history = {}


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤
def init_db():
    conn = sqlite3.connect('applicants.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS applicants (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            full_name TEXT NOT NULL,
            phone TEXT NOT NULL,
            telegram_tag TEXT NOT NULL,
            specialty TEXT NOT NULL,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    full_name = State()
    phone = State()
    telegram_tag = State()
    specialty = State()


# –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–ª—è –ò–ò)
faq_responses = {
    "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–¥–∂–∞":
        "–û—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–±—é–¥–∂–µ—Ç):\n"
        "1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (23.02.07, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.) - 50 –º–µ—Å—Ç\n"
        "2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (23.02.01, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º) - 50 –º–µ—Å—Ç\n"
        "3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —É—Å–ª—É–≥ (27.02.07, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º) - 50 –º–µ—Å—Ç\n"
        "4. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (38.02.03, –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "5. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (38.02.03, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.) - 50 –º–µ—Å—Ç\n"
        "6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (09.02.07, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.) - 50 –º–µ—Å—Ç\n"
        "7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (09.02.07, –ë–∞–ª–∞—à–∏—Ö–∞, 3–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "8. –°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (09.02.06, –ë–∞–ª–∞—à–∏—Ö–∞, 3–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "9. –°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (09.02.06, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "10. –¢—É—Ä–∏–∑–º –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ (43.02.16, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º) - 50 –º–µ—Å—Ç\n"
        "11. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã (43.02.17, –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "12. –ü–æ–≤–∞—Ä—Å–∫–æ–µ –∏ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–µ –¥–µ–ª–æ (43.02.15, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.) - 50 –º–µ—Å—Ç\n\n"

        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–±—é–¥–∂–µ—Ç):\n"
        "1. –ú–∞—Å—Ç–µ—Ä —Å–ª–µ—Å–∞—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç (15.01.35, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.2–º) - 50 –º–µ—Å—Ç\n"
        "2. –ú–∞—Å—Ç–µ—Ä —Å–ª–µ—Å–∞—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç (15.01.35, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º) - 25 –º–µ—Å—Ç\n"
        "3. –û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (09.01.03, –ù–æ–≥–∏–Ω—Å–∫, 1–≥.10–º) - 50 –º–µ—Å—Ç\n"
        "4. –û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (09.01.03, –ë–∞–ª–∞—à–∏—Ö–∞, 1–≥.10–º) - 25 –º–µ—Å—Ç\n\n"

        "–û—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç):\n"
        "1. –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è (40.02.04, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.) - 50 –º–µ—Å—Ç\n"
        "2. –Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è (40.02.04, –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "3. –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ (38.02.07, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.) - 25 –º–µ—Å—Ç\n"
        "4. –ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ (38.02.07, –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.) - 25 –º–µ—Å—Ç\n\n"

        "–ó–∞–æ—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç):\n"
        "1. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (38.02.03, –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º., –Ω–∞ –±–∞–∑–µ 11 –∫–ª.) - 16 –º–µ—Å—Ç\n"
        "2. –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (38.02.03, –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º., –Ω–∞ –±–∞–∑–µ 9 –∫–ª.) - 25 –º–µ—Å—Ç",

    "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏":
        "–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏: 8-916-084-38-73",

    "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏":
        "–†–∞–±–æ—á–∏–µ –¥–Ω–∏: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00 - 16:00\n"
        "–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã: 20 –∏—é–Ω—è - 15 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥.\n"
        "–ü–µ—Ä–µ—Ä—ã–≤: –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ –æ–±–µ–¥",

    "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?":
        "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
        "- –ö–æ–ø–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "- –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n"
        "- 6 —Ñ–æ—Ç–æ 3—Ö4\n\n"
        "–ü–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n"
        "- –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 086/—É\n"
        "- –ö–æ–ø–∏—è –°–ù–ò–õ–°\n"
        "- –ö–æ–ø–∏—è –ò–ù–ù\n"
        "- –ö–æ–ø–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∏—Å–∞",

    "–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã":
        "–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
        "–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        "- –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥: +2 –±–∞–ª–ª–∞\n"
        "- –ü—Ä–∏–∑–µ—Ä—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤: +1.5 –±–∞–ª–ª–∞",

    "–ï—Å—Ç—å –ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ?":
        "–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –∫–æ–ª–ª–µ–¥–∂–∞ –Ω–µ—Ç"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å HTML)
formatted_faq_responses = {
    "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–¥–∂–∞":
        "<b>–û—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–±—é–¥–∂–µ—Ç):</b>\n"
        "1. üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
        "   - –ö–æ–¥: 23.02.07\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "2. üöö <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ</b>\n"
        "   - –ö–æ–¥: 23.02.01\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "3. üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —É—Å–ª—É–≥</b>\n"
        "   - –ö–æ–¥: 27.02.07\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "4. üì¶ <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n"
        "   - –ö–æ–¥: 38.02.03\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "5. üì¶ <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n"
        "   - –ö–æ–¥: 38.02.03\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "6. üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        "   - –ö–æ–¥: 09.02.07\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "7. üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        "   - –ö–æ–¥: 09.02.07\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 3–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "8. üåê <b>–°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        "   - –ö–æ–¥: 09.02.06\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 3–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "9. üåê <b>–°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n"
        "   - –ö–æ–¥: 09.02.06\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "10. ‚úàÔ∏è <b>–¢—É—Ä–∏–∑–º –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ</b>\n"
        "    - –ö–æ–¥: 43.02.16\n"
        "    - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º\n"
        "    - <b>50 –º–µ—Å—Ç</b>\n\n"

        "11. üíÑ <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã</b>\n"
        "    - –ö–æ–¥: 43.02.17\n"
        "    - –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.\n"
        "    - <b>25 –º–µ—Å—Ç</b>\n\n"

        "12. üë®‚Äçüç≥ <b>–ü–æ–≤–∞—Ä—Å–∫–æ–µ –∏ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–µ –¥–µ–ª–æ</b>\n"
        "    - –ö–æ–¥: 43.02.15\n"
        "    - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.\n"
        "    - <b>50 –º–µ—Å—Ç</b>\n\n"

        "<b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–±—é–¥–∂–µ—Ç):</b>\n"
        "1. üîß <b>–ú–∞—Å—Ç–µ—Ä —Å–ª–µ—Å–∞—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n"
        "   - –ö–æ–¥: 15.01.35\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.2–º\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "2. üîß <b>–ú–∞—Å—Ç–µ—Ä —Å–ª–µ—Å–∞—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n"
        "   - –ö–æ–¥: 15.01.35\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "3. üíª <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n"
        "   - –ö–æ–¥: 09.01.03\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 1–≥.10–º\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "4. üíª <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n"
        "   - –ö–æ–¥: 09.01.03\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 1–≥.10–º\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "<b>–û—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç):</b>\n"
        "1. ‚öñÔ∏è <b>–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è</b>\n"
        "   - –ö–æ–¥: 40.02.04\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.\n"
        "   - <b>50 –º–µ—Å—Ç</b>\n\n"

        "2. ‚öñÔ∏è <b>–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è</b>\n"
        "   - –ö–æ–¥: 40.02.04\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "3. üí∞ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ</b>\n"
        "   - –ö–æ–¥: 38.02.07\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "4. üí∞ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ</b>\n"
        "   - –ö–æ–¥: 38.02.07\n"
        "   - –ë–∞–ª–∞—à–∏—Ö–∞, 2–≥.10–º.\n"
        "   - <b>25 –º–µ—Å—Ç</b>\n\n"

        "<b>–ó–∞–æ—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ (–≤–Ω–µ–±—é–¥–∂–µ—Ç):</b>\n"
        "1. üì¶ <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n"
        "   - –ö–æ–¥: 38.02.03\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 2–≥.10–º.\n"
        "   - –ù–∞ –±–∞–∑–µ 11 –∫–ª.\n"
        "   - <b>16 –º–µ—Å—Ç</b>\n\n"

        "2. üì¶ <b>–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n"
        "   - –ö–æ–¥: 38.02.03\n"
        "   - –ù–æ–≥–∏–Ω—Å–∫, 3–≥.10–º.\n"
        "   - –ù–∞ –±–∞–∑–µ 9 –∫–ª.\n"
        "   - <b>25 –º–µ—Å—Ç</b>",

    "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏":
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:</b> 8-916-084-38-73",

    "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏":
        "üïí <b>–†–∞–±–æ—á–∏–µ –¥–Ω–∏:</b> –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞\n"
        "‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> 9:00 - 16:00\n"
        "üìÖ <b>–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã:</b> 20 –∏—é–Ω—è - 15 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥.\n"
        "üçΩ <b>–ü–µ—Ä–µ—Ä—ã–≤:</b> –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ –æ–±–µ–¥",

    "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?":
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
        "- –ö–æ–ø–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "- –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n"
        "- 6 —Ñ–æ—Ç–æ 3—Ö4\n\n"
        "‚ö†Ô∏è <b>–ü–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>\n"
        "- –ú–µ–¥—Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ 086/—É\n"
        "- –ö–æ–ø–∏—è –°–ù–ò–õ–°\n"
        "- –ö–æ–ø–∏—è –ò–ù–ù\n"
        "- –ö–æ–ø–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∏—Å–∞",

    "–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã":
        "üéØ <b>–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞</b>\n"
        "‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
        "<b>–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
        "ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥: +2 –±–∞–ª–ª–∞\n"
        "ü•à –ü—Ä–∏–∑–µ—Ä—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤: +1.5 –±–∞–ª–ª–∞",

    "–ï—Å—Ç—å –ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ?":
        "üö´ <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –∫–æ–ª–ª–µ–¥–∂–∞ –Ω–µ—Ç</b>"
}


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ FAQ
def build_faq_keyboard():
    builder = ReplyKeyboardBuilder()
    for question in formatted_faq_responses.keys():
        builder.add(types.KeyboardButton(text=question))
    builder.add(types.KeyboardButton(text="–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"))
    builder.add(types.KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
def build_dialog_keyboard():
    builder = ReplyKeyboardBuilder()
    for question in formatted_faq_responses.keys():
        builder.add(types.KeyboardButton(text=question))
    builder.add(types.KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def build_specialties_keyboard():
    specialties = [
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —É—Å–ª—É–≥",
        "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (–ë–∞–ª–∞—à–∏—Ö–∞)",
        "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ (–ù–æ–≥–∏–Ω—Å–∫)",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ù–æ–≥–∏–Ω—Å–∫)",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ë–∞–ª–∞—à–∏—Ö–∞)",
        "–°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–ë–∞–ª–∞—à–∏—Ö–∞)",
        "–°–µ—Ç–µ–≤–æ–µ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ (–ù–æ–≥–∏–Ω—Å–∫)",
        "–¢—É—Ä–∏–∑–º –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã",
        "–ü–æ–≤–∞—Ä—Å–∫–æ–µ –∏ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–µ –¥–µ–ª–æ",
        "–ú–∞—Å—Ç–µ—Ä —Å–ª–µ—Å–∞—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç",
        "–û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
        "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è",
        "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ"
    ]

    builder = ReplyKeyboardBuilder()
    for specialty in specialties:
        builder.add(types.KeyboardButton(text=specialty))
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
def get_ai_context():
    context = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –ù–æ–≥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞. "
    context += "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:\n\n"

    for title, content in faq_responses.items():
        context += f"## {title} ##\n{content}\n\n"

    context += (
        "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤:\n"
        "1. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å—Ä–æ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "2. –ù–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ\n"
        "3. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "4. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ\n"
        "5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –∑–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è"
    )

    return context


# –û—á–∏—â–∞–µ–º HTML –¥–ª—è –ò–ò
def clean_html(text):
    return re.sub('<[^<]+?>', '', text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = "menu"
    conversation_history[user_id] = []

    keyboard = build_faq_keyboard()
    await message.answer(
        "üéì <b>–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –ù–æ–≥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
@dp.message(Command("register"))
async def start_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_states[user_id] = "registration"

    await state.set_state(RegistrationStates.full_name)
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞</b>\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
        "1. –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –í–∞—à Telegram —Ç–µ–≥\n"
        "4. –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:",
        reply_markup=types.ReplyKeyboardRemove()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def cancel_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_states[user_id] = "menu"

    await state.clear()
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=build_faq_keyboard()
    )


# –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message(RegistrationStates.full_name)
async def process_full_name(message: Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await state.update_data(full_name=message.text)
    await state.set_state(RegistrationStates.phone)
    await message.answer("‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ!\n\nüì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")


# –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(RegistrationStates.phone)
async def process_phone(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    phone = re.sub(r'\D', '', message.text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone.startswith('7') or len(phone) != 11:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return

    await state.update_data(phone=f"+7{phone[1:]}")
    await state.set_state(RegistrationStates.telegram_tag)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π username
    user_tag = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    await message.answer(
        f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"üîñ –í–∞—à —Ç–µ–∫—É—â–∏–π Telegram —Ç–µ–≥: {user_tag}\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ /skip\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram —Ç–µ–≥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @):"
    )


# –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —Ç–µ–≥–∞
@dp.message(RegistrationStates.telegram_tag)
async def process_telegram_tag(message: Message, state: FSMContext):
    if message.text == "/skip":
        user_tag = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        await state.update_data(telegram_tag=user_tag)
    else:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
        clean_tag = message.text.lstrip('@').strip()
        if not clean_tag:
            await message.answer("‚ùå –¢–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram —Ç–µ–≥:")
            return
        await state.update_data(telegram_tag=f"@{clean_tag}")

    await state.set_state(RegistrationStates.specialty)
    await message.answer(
        "‚úÖ Telegram —Ç–µ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "üéì –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=build_specialties_keyboard()
    )


# –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
@dp.message(RegistrationStates.specialty)
async def process_specialty(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏":
        await cancel_registration(message, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('applicants.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO applicants (user_id, full_name, phone, telegram_tag, specialty)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user_id,
            user_data['full_name'],
            user_data['phone'],
            user_data['telegram_tag'],
            message.text
        ))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=build_faq_keyboard()
        )
        return
    finally:
        conn.close()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    user_states[user_id] = "menu"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = (
        "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ <b>–§–ò–û:</b> {user_data['full_name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['phone']}\n"
        f"üîñ <b>Telegram:</b> {user_data['telegram_tag']}\n"
        f"üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {message.text}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."
    )

    await message.answer(
        result_message,
        parse_mode=ParseMode.HTML,
        reply_markup=build_faq_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ FAQ
@dp.message(lambda message: message.text in formatted_faq_responses)
async def handle_faq(message: Message):
    user_id = message.from_user.id
    response = formatted_faq_responses[message.text]

    # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if user_states.get(user_id) == "ai_dialog":
        await message.answer(
            f"üìã <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n{response}",
            reply_markup=build_dialog_keyboard()
        )
    else:
        await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"
@dp.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
async def handle_custom_question(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = "ai_dialog"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    conversation_history[user_id] = [
        {"role": "system", "content": get_ai_context()}
    ]

    await message.answer(
        "üí¨ <b>–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º</b>\n\n"
        "–Ø –∑–Ω–∞—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–¥–∂–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=build_dialog_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
@dp.message(lambda message: message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def end_dialog(message: Message):
    user_id = message.from_user.id
    user_states[user_id] = "menu"

    keyboard = build_faq_keyboard()
    await message.answer(
        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞
@dp.message(lambda message: user_states.get(message.from_user.id) == "ai_dialog")
async def handle_ai_question(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ FAQ-–∫–Ω–æ–ø–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text in formatted_faq_responses:
        await handle_faq(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if message.content_type != ContentType.TEXT:
        await message.answer(
            "‚ùå –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=build_dialog_keyboard()
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversation_history[user_id].append({
        "role": "user",
        "content": message.text
    })

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
        completion = api.chat.completions.create(
            model="deepseek/deepseek-r1-0528-qwen3-8b:free",
            messages=conversation_history[user_id],
            temperature=0.7,
            max_tokens=1024,
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
        response = completion.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not response:
            raise ValueError("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation_history[user_id].append({
            "role": "assistant",
            "content": response
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response, reply_markup=build_dialog_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ {user_id}: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ FAQ
        found = False
        for keyword, answer in formatted_faq_responses.items():
            if keyword.lower() in message.text.lower():
                await message.answer(
                    f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ:\n\n{answer}",
                    reply_markup=build_dialog_keyboard()
                )
                found = True
                break

        if not found:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.",
                reply_markup=build_dialog_keyboard()
            )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: Message):
    user_id = message.from_user.id
    current_state = user_states.get(user_id)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if message.content_type != ContentType.TEXT:
        reply_markup = build_faq_keyboard() if current_state == "menu" else build_dialog_keyboard()
        await message.answer(
            "‚ùå –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=reply_markup
        )
        return

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    if current_state == "menu":
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ FAQ
        found = False
        for keyword, answer in formatted_faq_responses.items():
            if keyword.lower() in message.text.lower():
                await message.answer(answer, reply_markup=build_faq_keyboard())
                found = True
                break

        if not found:
            keyboard = build_faq_keyboard()
            await message.answer(
                "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å'",
                reply_markup=keyboard
            )
    elif current_state == "ai_dialog":
        await handle_ai_question(message)
    else:
        user_states[user_id] = "menu"
        keyboard = build_faq_keyboard()
        await message.answer(
            "üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=keyboard
        )

ADMIN_IDS = [564492066]


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS


# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
@admin_dp.message(Command("start"))
async def admin_start(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏")
        return

    await message.answer(
        "üëÆ‚Äç‚ôÇÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ù–æ–≥–∏–Ω—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
        "/count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º\n"
        "/search - –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        parse_mode=ParseMode.HTML
    )


# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
@admin_dp.message(Command("view"))
async def view_applicants(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        conn = sqlite3.connect('applicants.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM applicants ORDER BY registration_date DESC")
        applicants = cursor.fetchall()

        if not applicants:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤")
            return

        response = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:</b>\n\n"

        for applicant in applicants:
            response += (
                f"üÜî <b>ID:</b> {applicant[0]}\n"
                f"üë§ <b>–§–ò–û:</b> {applicant[2]}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {applicant[3]}\n"
                f"üîñ <b>Telegram:</b> {applicant[4]}\n"
                f"üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {applicant[5]}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {applicant[6]}\n"
                f"üë§ <b>User ID:</b> {applicant[1]}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 5 –∑–∞–ø–∏—Å–µ–π
            if applicants.index(applicant) % 5 == 4:
                await message.answer(response, parse_mode=ParseMode.HTML)
                response = ""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        if response:
            await message.answer(response, parse_mode=ParseMode.HTML)

        await message.answer(f"‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(applicants)} –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
    finally:
        conn.close()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—è–≤–æ–∫
@admin_dp.message(Command("count"))
async def count_applicants(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        conn = sqlite3.connect('applicants.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM applicants")
        count = cursor.fetchone()[0]

        await message.answer(f"üë• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:</b> {count}",
                             parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        conn.close()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
@admin_dp.message(Command("stats"))
async def specialty_stats(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        conn = sqlite3.connect('applicants.db')
        cursor = conn.cursor()
        cursor.execute("SELECT specialty, COUNT(*) FROM applicants GROUP BY specialty ORDER BY COUNT(*) DESC")
        stats = cursor.fetchall()

        if not stats:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        response = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:</b>\n\n"
        total = 0

        for row in stats:
            response += f"üéì <b>{row[0]}</b>: {row[1]} —á–µ–ª.\n"
            total += row[1]

        response += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total} –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤"

        await message.answer(response, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        conn.close()


# –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@admin_dp.message(Command("search"))
async def search_applicants(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    search_query = message.text.split(' ', 1)
    if len(search_query) < 2 or not search_query[1].strip():
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/search –ò–≤–∞–Ω–æ–≤</code>",
            parse_mode=ParseMode.HTML)
        return

    search_term = f"%{search_query[1].strip()}%"

    try:
        conn = sqlite3.connect('applicants.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM applicants 
            WHERE full_name LIKE ? OR phone LIKE ?
            ORDER BY registration_date DESC
        """, (search_term, search_term))

        applicants = cursor.fetchall()

        if not applicants:
            await message.answer("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        response = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query[1]}':</b>\n\n"

        for applicant in applicants:
            response += (
                f"üë§ <b>–§–ò–û:</b> {applicant[2]}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {applicant[3]}\n"
                f"üîñ <b>Telegram:</b> {applicant[4]}\n"
                f"üéì <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {applicant[5]}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {applicant[6]}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 3 –∑–∞–ø–∏—Å–∏
            if applicants.index(applicant) % 3 == 2:
                await message.answer(response, parse_mode=ParseMode.HTML)
                response = ""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        if response:
            await message.answer(response, parse_mode=ParseMode.HTML)

        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(applicants)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")
    finally:
        conn.close()


# –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
@admin_dp.message(Command("help"))
async def admin_help(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤\n"
        "/count - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º\n"
        "/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "<code>/search –ò–≤–∞–Ω–æ–≤</code> - –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏\n"
        "<code>/search +7916</code> - –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    )

    await message.answer(help_text, parse_mode=ParseMode.HTML)


# –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        admin_dp.start_polling(admin_bot)
    )


if __name__ == '__main__':
    asyncio.run(main())
